[{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"import {render,screen} from '@testing-lbrary/react';\r\n\r\nfunction ColorList(){\r\n   return (\r\n     <ul> --- 'list'\r\n       <li>Red</li> --- 'listitem'\r\n       <li>Blue</li> --- 'listitem'\r\n       <li>Green</li> --- 'listitem'\r\n     </ul>\r\n\r\n     \r\n\r\n   );\r\n}\r\n\r\n\r\nrender(<ColorList/>)\r\n\r\n","type":"code","id":"fesux"},{"content":"test(\"getBy, queryBy, findBy finding 0 elements\", async()=>{\r\n  render(<ColorList />);\r\n\r\n  // the default behavior of any function that begin with getBy is to find exact one element\r\n  // if we find 0 or greated than 1, then we are going to end up getting an error\r\n  // screen.getByRole(\"textbox\");\r\n\r\n  // write a test to confirm that the line of code above will throw an error message\r\n  expect(\r\n    ()=> screen.getByRole(\"textbox\")\r\n  ).toThrow();\r\n\r\n  // query by role will try to find the element that does not exist\r\n  // expect the query by role of text box will give us back a value of null.\r\n  expect (screen.queryByRole(\"textbox\")).toEqual(null);\r\n\r\n  // it will watch the output of your component over a span of one second to find some element within the component, which the element will only be one.\r\n  // if it does not find that element within the span of one second, then it is going to throw an error\r\n\r\n  let errorThrown = false;\r\n\r\n  try{\r\n    await screen.findByRole(\"textbox\");\r\n  } catch(err){\r\n    errorThrown = true\r\n  }\r\n\r\n  expect(errorThrown).toEqual(true);\r\n\r\n})","type":"code","id":"vwizt"},{"content":"test(\"getBy, queryBy, findBy when they find 1 element\", async ()=>{\r\n\r\n  render(<ColorList/>);\r\n\r\n  expect(\r\n    screen.getByRole(\"list\")\r\n  ).toBeInTheDocument()\r\n\r\n  expect( \r\n    screen.queryByRole(\"list\") \r\n  ).toBeInTheDocument()\r\n\r\n  expect(\r\n    await screen.findByRole(\"list\")\r\n  ).toBeInTheDocument()\r\n\r\n});","type":"code","id":"7afpr"},{"content":"test(\"getBy, queryBy, findBy when finding > 1 elements\", async ()=>{\r\n  render(<ColorList />);\r\n\r\n   expect(\r\n    () => screen.getByRole(\"listitem\")\r\n  ).toThrow();\r\n\r\n  // query by role will try to find the element that does not exist\r\n  // expect the query by role of text box will give us back a value of null.\r\n  expect (\r\n    () => screen.queryByRole(\"listitem\")\r\n  ).toThrow();\r\n\r\n  // it will watch the output of your component over a span of one second to find some element within the component, which the element will only be one.\r\n  // if it does not find that element within the span of one second, then it is going to throw an error\r\n\r\n  let errorThrown = false;\r\n\r\n  try{\r\n    await screen.findByRole(\"listitem\");\r\n  } catch(err){\r\n    errorThrown = true\r\n  }\r\n\r\n  expect(errorThrown).toEqual(true);\r\n})","type":"code","id":"jvdzz"},{"content":"test(\"getAllBy, queryAllBy, findAllBy\", async ()=>{\r\n  render(<ColorList/>);\r\n\r\n  expect(\r\n    screen.getAllByRole(\"listitem\")\r\n  ).toHaveLength(3)\r\n\r\n  \r\n  expect(\r\n    screen.queryAllByRole(\"listitem\")\r\n  ).toHaveLength(3)\r\n\r\n  \r\n  expect(\r\n    await screen.findAllByRole(\"listitem\")\r\n  ).toHaveLength(3)\r\n})","type":"code","id":"ucu2z"},{"content":"test(\"favor using getBy to prove an element exist\", ()=>{\r\n  render(<ColorList/>);\r\n\r\n  const element1 =  screen.queryByRole(\"textbox\")\r\n  // const element =  screen.getByRole(\"textbox\")\r\n\r\n  // expect(element).toBeInTheDocument();\r\n\r\n})","type":"code","id":"5h7fo"},{"content":"test(\"favor queryBy when proving an element does not exist\", ()=>{\r\n  render(<ColorList/>);\r\n\r\n  const element = screen.queryByRole(\"textbox\");\r\n\r\n  expect(element).not.toBeInTheDocument();\r\n})","type":"code","id":"ge4oi"},{"content":"import {useState, useEffect} from \"react\";\r\n\r\nfunction fakeFetchColors(){\r\n  return Promise.resolve(\r\n    ['red', 'greem', 'blue']\r\n  );\r\n}\r\n\r\nfunction LoadableColorList(){\r\n  const [colors, setColors] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    fakeFetchColors().then(c => setColors(c));\r\n  },[]);\r\n\r\n  const renderedColors =  colors.map(color=>{\r\n    return <li key={color}>{color}</li>\r\n  });\r\n\r\n  return <ul>{renderedColors}</ul>\r\n}\r\n\r\nrender(<LoadableColorList />);\r\n","type":"code","id":"5uyyw"},{"content":"test(\"Favor findBy or findAllBy when data fetching\", async()=>{\r\n  render(<LoadableColorList />);\r\n\r\n  // const els = screen.getAllByRole(\"listitem\");\r\n  // user find all by role query will find the presence of these different list items several times over one second \r\n  const els = await screen.findAllByRole(\"listitem\");\r\n\r\n  expect(els).toHaveLength(3);\r\n\r\n\r\n})","type":"code","id":"ogt6b"}]